version: '3.9'

services:
  # ------------------------
  # PHP + Laravel Application
  # ------------------------
  app:
    build:
      context: .
      dockerfile: ./.docker/Dockerfile         # ƒë√£ t·ªëi ∆∞u multi-stage + alpine
      args:
        APP_ENV: ${APP_ENV:-local}
    image: plantstore-app:latest
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      # üëâ DEV: mount code ƒë·ªÉ hot reload
      - ./src:/var/www/html
      # üëâ n·∫øu production => b·ªè d√≤ng tr√™n v√† COPY code trong Dockerfile
    environment:
      APP_ENV: ${APP_ENV:-local}
      CONTAINER_ROLE: app
    command: ["php-fpm"]                        # ch·ªâ ch·∫°y php-fpm (supervisord d√πng ri√™ng n·∫øu c·∫ßn)
    networks:
      - backend
    depends_on:
      - redis

  # ------------------------
  # Nginx Web Server
  # ------------------------
  nginx:
    build:
      context: .
      dockerfile: ./.docker/Dockerfile.nginx   # nginx:alpine + config template
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-8080}:80"
    volumes:
      # üëâ DEV: mount code read-only
      - ./src:/var/www/html:ro
      # üëâ template config (dev c√≥ th·ªÉ override)
      - ./.docker/conf/nginx.conf.template:/etc/nginx/templates/default.conf.template
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME:-mydev.local}
    depends_on:
      - app
    networks:
      - backend

  # ------------------------
  # Database (MySQL)
  # ------------------------
  mysql:
    image: mysql:8.1-oracle
    restart: unless-stopped
    ports:
      - "${DB_PORT_FW:-3306}:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-plant_db}
      MYSQL_USER: ${DB_USERNAME:-user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-pass}
      MYSQL_ROOT_PASSWORD: "root*password"
    volumes:
      - mysqldb:/var/lib/mysql
    networks:
      - backend

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"            # optional: m·ªü ra ngo√†i cho debug
    networks:
      - backend

volumes:
  mysqldb:

networks:
  backend:
    driver: bridge
